zola-6e2595a191f2dd72a91a632e51b66b1cf5187083/vendor/rayon-1.5.0/src/slice/mergesort.rs:325:            if is_less(v.get_unchecked(start + 1), v.get_unchecked(start)) {
zola-6e2595a191f2dd72a91a632e51b66b1cf5187083/vendor/rayon-1.5.0/src/slice/mergesort.rs:326:                while start > 0 && is_less(v.get_unchecked(start), v.get_unchecked(start - 1)) {
zola-6e2595a191f2dd72a91a632e51b66b1cf5187083/vendor/rayon-1.5.0/src/slice/mergesort.rs:337:                while start > 0 && !is_less(v.get_unchecked(start), v.get_unchecked(start - 1)) {
zola-6e2595a191f2dd72a91a632e51b66b1cf5187083/vendor/rayon-1.5.0/src/slice/quicksort.rs:62:        if len >= 2 && is_less(v.get_unchecked(1), v.get_unchecked(0)) {
zola-6e2595a191f2dd72a91a632e51b66b1cf5187083/vendor/rayon-1.5.0/src/slice/quicksort.rs:73:            ptr::copy_nonoverlapping(v.get_unchecked(1), v.get_unchecked_mut(0), 1);
zola-6e2595a191f2dd72a91a632e51b66b1cf5187083/vendor/rayon-1.5.0/src/slice/quicksort.rs:81:                ptr::copy_nonoverlapping(v.get_unchecked(i), v.get_unchecked_mut(i - 1), 1);
zola-6e2595a191f2dd72a91a632e51b66b1cf5187083/vendor/rayon-1.5.0/src/slice/quicksort.rs:97:        if len >= 2 && is_less(v.get_unchecked(len - 1), v.get_unchecked(len - 2)) {
zola-6e2595a191f2dd72a91a632e51b66b1cf5187083/vendor/rayon-1.5.0/src/slice/quicksort.rs:108:            ptr::copy_nonoverlapping(v.get_unchecked(len - 2), v.get_unchecked_mut(len - 1), 1);
zola-6e2595a191f2dd72a91a632e51b66b1cf5187083/vendor/rayon-1.5.0/src/slice/quicksort.rs:116:                ptr::copy_nonoverlapping(v.get_unchecked(i), v.get_unchecked_mut(i + 1), 1);
zola-6e2595a191f2dd72a91a632e51b66b1cf5187083/vendor/rayon-1.5.0/src/slice/quicksort.rs:143:            while i < len && !is_less(v.get_unchecked(i), v.get_unchecked(i - 1)) {
zola-6e2595a191f2dd72a91a632e51b66b1cf5187083/vendor/rayon-1.5.0/src/slice/quicksort.rs:515:            ptr::swap(v.get_unchecked_mut(l), v.get_unchecked_mut(r));
zola-6e2595a191f2dd72a91a632e51b66b1cf5187083/vendor/rayon-1.5.0/src/slice/quicksort.rs:598:            if is_less(v.get_unchecked(*b), v.get_unchecked(*a)) {
splinter-7382303182863a3f2ca575a3c421fdf4361885de/splinter/vendor/rustlearn-0.5.0/src/array/dense.rs:606:                    data.push(self.get_unchecked(i, j) + rhs.get_unchecked(i, j));
splinter-7382303182863a3f2ca575a3c421fdf4361885de/splinter/vendor/rustlearn-0.5.0/src/array/dense.rs:640:                    data.push(self.get_unchecked(i, j) - rhs.get_unchecked(i, j));
splinter-7382303182863a3f2ca575a3c421fdf4361885de/splinter/vendor/rustlearn-0.5.0/src/array/dense.rs:674:                    data.push(self.get_unchecked(i, j) * rhs.get_unchecked(i, j));
splinter-7382303182863a3f2ca575a3c421fdf4361885de/splinter/vendor/rustlearn-0.5.0/src/array/dense.rs:708:                    data.push(self.get_unchecked(i, j) / rhs.get_unchecked(i, j));
splinter-7382303182863a3f2ca575a3c421fdf4361885de/splinter/vendor/rustlearn-0.5.0/src/array/dense.rs:749:                        output_entry += self.get_unchecked(i, k) * rhs.get_unchecked(k, j);
splinter-7382303182863a3f2ca575a3c421fdf4361885de/splinter/vendor/rand_hc-0.1.0/src/hc128.rs:186:            *p.get_unchecked_mut(i) = p.get_unchecked(i)
splinter-7382303182863a3f2ca575a3c421fdf4361885de/splinter/vendor/rand_hc-0.1.0/src/hc128.rs:211:            *q.get_unchecked_mut(i) = q.get_unchecked(i)
gecko-dev-f90389736b755ff0063b6abfeeeaedeaeec08acd/third_party/rust/fallible_collections/src/btree/node.rs:1147:        unsafe { (keys.get_unchecked(self.idx), vals.get_unchecked(self.idx)) }
gecko-dev-f90389736b755ff0063b6abfeeeaedeaeec08acd/third_party/rust/packed_simd/src/codegen/math/float/sin_cos_pi.rs:69:                    (*r.0.get_unchecked(0), *r.0.get_unchecked(1))
gecko-dev-f90389736b755ff0063b6abfeeeaedeaeec08acd/third_party/rust/rayon/src/slice/mergesort.rs:325:            if is_less(v.get_unchecked(start + 1), v.get_unchecked(start)) {
gecko-dev-f90389736b755ff0063b6abfeeeaedeaeec08acd/third_party/rust/rayon/src/slice/mergesort.rs:326:                while start > 0 && is_less(v.get_unchecked(start), v.get_unchecked(start - 1)) {
gecko-dev-f90389736b755ff0063b6abfeeeaedeaeec08acd/third_party/rust/rayon/src/slice/mergesort.rs:337:                while start > 0 && !is_less(v.get_unchecked(start), v.get_unchecked(start - 1)) {
gecko-dev-f90389736b755ff0063b6abfeeeaedeaeec08acd/third_party/rust/rayon/src/slice/quicksort.rs:62:        if len >= 2 && is_less(v.get_unchecked(1), v.get_unchecked(0)) {
gecko-dev-f90389736b755ff0063b6abfeeeaedeaeec08acd/third_party/rust/rayon/src/slice/quicksort.rs:73:            ptr::copy_nonoverlapping(v.get_unchecked(1), v.get_unchecked_mut(0), 1);
gecko-dev-f90389736b755ff0063b6abfeeeaedeaeec08acd/third_party/rust/rayon/src/slice/quicksort.rs:81:                ptr::copy_nonoverlapping(v.get_unchecked(i), v.get_unchecked_mut(i - 1), 1);
gecko-dev-f90389736b755ff0063b6abfeeeaedeaeec08acd/third_party/rust/rayon/src/slice/quicksort.rs:97:        if len >= 2 && is_less(v.get_unchecked(len - 1), v.get_unchecked(len - 2)) {
gecko-dev-f90389736b755ff0063b6abfeeeaedeaeec08acd/third_party/rust/rayon/src/slice/quicksort.rs:108:            ptr::copy_nonoverlapping(v.get_unchecked(len - 2), v.get_unchecked_mut(len - 1), 1);
gecko-dev-f90389736b755ff0063b6abfeeeaedeaeec08acd/third_party/rust/rayon/src/slice/quicksort.rs:116:                ptr::copy_nonoverlapping(v.get_unchecked(i), v.get_unchecked_mut(i + 1), 1);
gecko-dev-f90389736b755ff0063b6abfeeeaedeaeec08acd/third_party/rust/rayon/src/slice/quicksort.rs:143:            while i < len && !is_less(v.get_unchecked(i), v.get_unchecked(i - 1)) {
gecko-dev-f90389736b755ff0063b6abfeeeaedeaeec08acd/third_party/rust/rayon/src/slice/quicksort.rs:515:            ptr::swap(v.get_unchecked_mut(l), v.get_unchecked_mut(r));
gecko-dev-f90389736b755ff0063b6abfeeeaedeaeec08acd/third_party/rust/rayon/src/slice/quicksort.rs:598:            if is_less(v.get_unchecked(*b), v.get_unchecked(*a)) {
gecko-dev-f90389736b755ff0063b6abfeeeaedeaeec08acd/third_party/rust/rand_hc/src/hc128.rs:187:            *p.get_unchecked_mut(i) = p.get_unchecked(i)
gecko-dev-f90389736b755ff0063b6abfeeeaedeaeec08acd/third_party/rust/rand_hc/src/hc128.rs:212:            *q.get_unchecked_mut(i) = q.get_unchecked(i)
gecko-dev-f90389736b755ff0063b6abfeeeaedeaeec08acd/vendor/rayon-1.4.1/src/slice/mergesort.rs:325:            if is_less(v.get_unchecked(start + 1), v.get_unchecked(start)) {
gecko-dev-f90389736b755ff0063b6abfeeeaedeaeec08acd/vendor/rayon-1.4.1/src/slice/mergesort.rs:326:                while start > 0 && is_less(v.get_unchecked(start), v.get_unchecked(start - 1)) {
gecko-dev-f90389736b755ff0063b6abfeeeaedeaeec08acd/vendor/rayon-1.4.1/src/slice/mergesort.rs:337:                while start > 0 && !is_less(v.get_unchecked(start), v.get_unchecked(start - 1)) {
gecko-dev-f90389736b755ff0063b6abfeeeaedeaeec08acd/vendor/rayon-1.4.1/src/slice/quicksort.rs:62:        if len >= 2 && is_less(v.get_unchecked(1), v.get_unchecked(0)) {
gecko-dev-f90389736b755ff0063b6abfeeeaedeaeec08acd/vendor/rayon-1.4.1/src/slice/quicksort.rs:73:            ptr::copy_nonoverlapping(v.get_unchecked(1), v.get_unchecked_mut(0), 1);
gecko-dev-f90389736b755ff0063b6abfeeeaedeaeec08acd/vendor/rayon-1.4.1/src/slice/quicksort.rs:81:                ptr::copy_nonoverlapping(v.get_unchecked(i), v.get_unchecked_mut(i - 1), 1);
gecko-dev-f90389736b755ff0063b6abfeeeaedeaeec08acd/vendor/rayon-1.4.1/src/slice/quicksort.rs:97:        if len >= 2 && is_less(v.get_unchecked(len - 1), v.get_unchecked(len - 2)) {
gecko-dev-f90389736b755ff0063b6abfeeeaedeaeec08acd/vendor/rayon-1.4.1/src/slice/quicksort.rs:108:            ptr::copy_nonoverlapping(v.get_unchecked(len - 2), v.get_unchecked_mut(len - 1), 1);
gecko-dev-f90389736b755ff0063b6abfeeeaedeaeec08acd/vendor/rayon-1.4.1/src/slice/quicksort.rs:116:                ptr::copy_nonoverlapping(v.get_unchecked(i), v.get_unchecked_mut(i + 1), 1);
gecko-dev-f90389736b755ff0063b6abfeeeaedeaeec08acd/vendor/rayon-1.4.1/src/slice/quicksort.rs:143:            while i < len && !is_less(v.get_unchecked(i), v.get_unchecked(i - 1)) {
gecko-dev-f90389736b755ff0063b6abfeeeaedeaeec08acd/vendor/rayon-1.4.1/src/slice/quicksort.rs:515:            ptr::swap(v.get_unchecked_mut(l), v.get_unchecked_mut(r));
gecko-dev-f90389736b755ff0063b6abfeeeaedeaeec08acd/vendor/rayon-1.4.1/src/slice/quicksort.rs:598:            if is_less(v.get_unchecked(*b), v.get_unchecked(*a)) {
gecko-dev-f90389736b755ff0063b6abfeeeaedeaeec08acd/vendor/fallible_collections-0.3.1/src/btree/node.rs:1147:        unsafe { (keys.get_unchecked(self.idx), vals.get_unchecked(self.idx)) }
rage-4aa52a2dbb5feed86dcafa3afe8d554975ca5518/vendor/bitvec-0.19.5/src/slice.rs:1548:		(self.get_unchecked(.. mid), self.get_unchecked(mid ..))
rage-4aa52a2dbb5feed86dcafa3afe8d554975ca5518/vendor/bitvec-0.19.5/src/slice/api.rs:2122:					(*self.get_unchecked(n), *other.get_unchecked(n));
iron-cde77e5e0e9bfa1bf1230f4bdd8491f4f4cdc72c/vendor/rand_hc-0.1.0/src/hc128.rs:186:            *p.get_unchecked_mut(i) = p.get_unchecked(i)
iron-cde77e5e0e9bfa1bf1230f4bdd8491f4f4cdc72c/vendor/rand_hc-0.1.0/src/hc128.rs:211:            *q.get_unchecked_mut(i) = q.get_unchecked(i)
vector-0c9b44108a0726ed28d7fa78965bbc97b2c0598c/vendor/bitvec-0.19.4/src/slice.rs:1548:		(self.get_unchecked(.. mid), self.get_unchecked(mid ..))
vector-0c9b44108a0726ed28d7fa78965bbc97b2c0598c/vendor/bitvec-0.19.4/src/slice/api.rs:2122:					(*self.get_unchecked(n), *other.get_unchecked(n));
vector-0c9b44108a0726ed28d7fa78965bbc97b2c0598c/vendor/standback-0.2.15/src/v1_49/sort.rs:61:        if len >= 2 && is_less(v.get_unchecked(len - 1), v.get_unchecked(len - 2)) {
vector-0c9b44108a0726ed28d7fa78965bbc97b2c0598c/vendor/standback-0.2.15/src/v1_49/sort.rs:70:            ptr::copy_nonoverlapping(v.get_unchecked(len - 2), v.get_unchecked_mut(len - 1), 1);
vector-0c9b44108a0726ed28d7fa78965bbc97b2c0598c/vendor/standback-0.2.15/src/v1_49/sort.rs:78:                ptr::copy_nonoverlapping(v.get_unchecked(i), v.get_unchecked_mut(i + 1), 1);
vector-0c9b44108a0726ed28d7fa78965bbc97b2c0598c/vendor/standback-0.2.15/src/v1_49/sort.rs:424:            ptr::swap(v.get_unchecked_mut(l), v.get_unchecked_mut(r));
vector-0c9b44108a0726ed28d7fa78965bbc97b2c0598c/vendor/standback-0.2.15/src/v1_49/sort.rs:462:            if is_less(v.get_unchecked(*b), v.get_unchecked(*a)) {
wasmer-0daa7e2add76f7d40a63dad4f831f753d35504ce/vendor/rayon-1.5.0/src/slice/mergesort.rs:325:            if is_less(v.get_unchecked(start + 1), v.get_unchecked(start)) {
wasmer-0daa7e2add76f7d40a63dad4f831f753d35504ce/vendor/rayon-1.5.0/src/slice/mergesort.rs:326:                while start > 0 && is_less(v.get_unchecked(start), v.get_unchecked(start - 1)) {
wasmer-0daa7e2add76f7d40a63dad4f831f753d35504ce/vendor/rayon-1.5.0/src/slice/mergesort.rs:337:                while start > 0 && !is_less(v.get_unchecked(start), v.get_unchecked(start - 1)) {
wasmer-0daa7e2add76f7d40a63dad4f831f753d35504ce/vendor/rayon-1.5.0/src/slice/quicksort.rs:62:        if len >= 2 && is_less(v.get_unchecked(1), v.get_unchecked(0)) {
wasmer-0daa7e2add76f7d40a63dad4f831f753d35504ce/vendor/rayon-1.5.0/src/slice/quicksort.rs:73:            ptr::copy_nonoverlapping(v.get_unchecked(1), v.get_unchecked_mut(0), 1);
wasmer-0daa7e2add76f7d40a63dad4f831f753d35504ce/vendor/rayon-1.5.0/src/slice/quicksort.rs:81:                ptr::copy_nonoverlapping(v.get_unchecked(i), v.get_unchecked_mut(i - 1), 1);
wasmer-0daa7e2add76f7d40a63dad4f831f753d35504ce/vendor/rayon-1.5.0/src/slice/quicksort.rs:97:        if len >= 2 && is_less(v.get_unchecked(len - 1), v.get_unchecked(len - 2)) {
wasmer-0daa7e2add76f7d40a63dad4f831f753d35504ce/vendor/rayon-1.5.0/src/slice/quicksort.rs:108:            ptr::copy_nonoverlapping(v.get_unchecked(len - 2), v.get_unchecked_mut(len - 1), 1);
wasmer-0daa7e2add76f7d40a63dad4f831f753d35504ce/vendor/rayon-1.5.0/src/slice/quicksort.rs:116:                ptr::copy_nonoverlapping(v.get_unchecked(i), v.get_unchecked_mut(i + 1), 1);
wasmer-0daa7e2add76f7d40a63dad4f831f753d35504ce/vendor/rayon-1.5.0/src/slice/quicksort.rs:143:            while i < len && !is_less(v.get_unchecked(i), v.get_unchecked(i - 1)) {
wasmer-0daa7e2add76f7d40a63dad4f831f753d35504ce/vendor/rayon-1.5.0/src/slice/quicksort.rs:515:            ptr::swap(v.get_unchecked_mut(l), v.get_unchecked_mut(r));
wasmer-0daa7e2add76f7d40a63dad4f831f753d35504ce/vendor/rayon-1.5.0/src/slice/quicksort.rs:598:            if is_less(v.get_unchecked(*b), v.get_unchecked(*a)) {
tantivy-ba4bc6d7c35677a3731bd89f95ed9c9e2dac0c4b/vendor/rayon-1.5.1/src/slice/mergesort.rs:325:            if is_less(v.get_unchecked(start + 1), v.get_unchecked(start)) {
tantivy-ba4bc6d7c35677a3731bd89f95ed9c9e2dac0c4b/vendor/rayon-1.5.1/src/slice/mergesort.rs:326:                while start > 0 && is_less(v.get_unchecked(start), v.get_unchecked(start - 1)) {
tantivy-ba4bc6d7c35677a3731bd89f95ed9c9e2dac0c4b/vendor/rayon-1.5.1/src/slice/mergesort.rs:337:                while start > 0 && !is_less(v.get_unchecked(start), v.get_unchecked(start - 1)) {
tantivy-ba4bc6d7c35677a3731bd89f95ed9c9e2dac0c4b/vendor/rayon-1.5.1/src/slice/quicksort.rs:62:        if len >= 2 && is_less(v.get_unchecked(1), v.get_unchecked(0)) {
tantivy-ba4bc6d7c35677a3731bd89f95ed9c9e2dac0c4b/vendor/rayon-1.5.1/src/slice/quicksort.rs:73:            ptr::copy_nonoverlapping(v.get_unchecked(1), v.get_unchecked_mut(0), 1);
tantivy-ba4bc6d7c35677a3731bd89f95ed9c9e2dac0c4b/vendor/rayon-1.5.1/src/slice/quicksort.rs:81:                ptr::copy_nonoverlapping(v.get_unchecked(i), v.get_unchecked_mut(i - 1), 1);
tantivy-ba4bc6d7c35677a3731bd89f95ed9c9e2dac0c4b/vendor/rayon-1.5.1/src/slice/quicksort.rs:97:        if len >= 2 && is_less(v.get_unchecked(len - 1), v.get_unchecked(len - 2)) {
tantivy-ba4bc6d7c35677a3731bd89f95ed9c9e2dac0c4b/vendor/rayon-1.5.1/src/slice/quicksort.rs:108:            ptr::copy_nonoverlapping(v.get_unchecked(len - 2), v.get_unchecked_mut(len - 1), 1);
tantivy-ba4bc6d7c35677a3731bd89f95ed9c9e2dac0c4b/vendor/rayon-1.5.1/src/slice/quicksort.rs:116:                ptr::copy_nonoverlapping(v.get_unchecked(i), v.get_unchecked_mut(i + 1), 1);
tantivy-ba4bc6d7c35677a3731bd89f95ed9c9e2dac0c4b/vendor/rayon-1.5.1/src/slice/quicksort.rs:143:            while i < len && !is_less(v.get_unchecked(i), v.get_unchecked(i - 1)) {
tantivy-ba4bc6d7c35677a3731bd89f95ed9c9e2dac0c4b/vendor/rayon-1.5.1/src/slice/quicksort.rs:515:            ptr::swap(v.get_unchecked_mut(l), v.get_unchecked_mut(r));
tantivy-ba4bc6d7c35677a3731bd89f95ed9c9e2dac0c4b/vendor/rayon-1.5.1/src/slice/quicksort.rs:598:            if is_less(v.get_unchecked(*b), v.get_unchecked(*a)) {
RustPython-85ad2b1f7d4c08f40f33f6925ae6cdccc3ec35b4/vendor/lz4_flex-0.7.5/src/block/compress.rs:331:    while unsafe{*candidate > 0 && *cur > literal_start && input.get_unchecked(*cur-1) == input.get_unchecked(*candidate-1)} {
gfx-be39ddaf7d5f017da9597a94f6fd66e17e7df2e3/vendor/rayon-1.5.1/src/slice/mergesort.rs:325:            if is_less(v.get_unchecked(start + 1), v.get_unchecked(start)) {
gfx-be39ddaf7d5f017da9597a94f6fd66e17e7df2e3/vendor/rayon-1.5.1/src/slice/mergesort.rs:326:                while start > 0 && is_less(v.get_unchecked(start), v.get_unchecked(start - 1)) {
gfx-be39ddaf7d5f017da9597a94f6fd66e17e7df2e3/vendor/rayon-1.5.1/src/slice/mergesort.rs:337:                while start > 0 && !is_less(v.get_unchecked(start), v.get_unchecked(start - 1)) {
gfx-be39ddaf7d5f017da9597a94f6fd66e17e7df2e3/vendor/rayon-1.5.1/src/slice/quicksort.rs:62:        if len >= 2 && is_less(v.get_unchecked(1), v.get_unchecked(0)) {
gfx-be39ddaf7d5f017da9597a94f6fd66e17e7df2e3/vendor/rayon-1.5.1/src/slice/quicksort.rs:73:            ptr::copy_nonoverlapping(v.get_unchecked(1), v.get_unchecked_mut(0), 1);
gfx-be39ddaf7d5f017da9597a94f6fd66e17e7df2e3/vendor/rayon-1.5.1/src/slice/quicksort.rs:81:                ptr::copy_nonoverlapping(v.get_unchecked(i), v.get_unchecked_mut(i - 1), 1);
gfx-be39ddaf7d5f017da9597a94f6fd66e17e7df2e3/vendor/rayon-1.5.1/src/slice/quicksort.rs:97:        if len >= 2 && is_less(v.get_unchecked(len - 1), v.get_unchecked(len - 2)) {
gfx-be39ddaf7d5f017da9597a94f6fd66e17e7df2e3/vendor/rayon-1.5.1/src/slice/quicksort.rs:108:            ptr::copy_nonoverlapping(v.get_unchecked(len - 2), v.get_unchecked_mut(len - 1), 1);
gfx-be39ddaf7d5f017da9597a94f6fd66e17e7df2e3/vendor/rayon-1.5.1/src/slice/quicksort.rs:116:                ptr::copy_nonoverlapping(v.get_unchecked(i), v.get_unchecked_mut(i + 1), 1);
gfx-be39ddaf7d5f017da9597a94f6fd66e17e7df2e3/vendor/rayon-1.5.1/src/slice/quicksort.rs:143:            while i < len && !is_less(v.get_unchecked(i), v.get_unchecked(i - 1)) {
gfx-be39ddaf7d5f017da9597a94f6fd66e17e7df2e3/vendor/rayon-1.5.1/src/slice/quicksort.rs:515:            ptr::swap(v.get_unchecked_mut(l), v.get_unchecked_mut(r));
gfx-be39ddaf7d5f017da9597a94f6fd66e17e7df2e3/vendor/rayon-1.5.1/src/slice/quicksort.rs:598:            if is_less(v.get_unchecked(*b), v.get_unchecked(*a)) {
gfx-be39ddaf7d5f017da9597a94f6fd66e17e7df2e3/vendor/generic-array-0.9.1/src/lib.rs:326:            f(self.get_unchecked(i), rhs.get_unchecked(i))
servo-19be2cd3fa4b8fe2560dda9a62f1c2271f9fb41e/vendor/rayon-1.5.0/src/slice/mergesort.rs:325:            if is_less(v.get_unchecked(start + 1), v.get_unchecked(start)) {
servo-19be2cd3fa4b8fe2560dda9a62f1c2271f9fb41e/vendor/rayon-1.5.0/src/slice/mergesort.rs:326:                while start > 0 && is_less(v.get_unchecked(start), v.get_unchecked(start - 1)) {
servo-19be2cd3fa4b8fe2560dda9a62f1c2271f9fb41e/vendor/rayon-1.5.0/src/slice/mergesort.rs:337:                while start > 0 && !is_less(v.get_unchecked(start), v.get_unchecked(start - 1)) {
servo-19be2cd3fa4b8fe2560dda9a62f1c2271f9fb41e/vendor/rayon-1.5.0/src/slice/quicksort.rs:62:        if len >= 2 && is_less(v.get_unchecked(1), v.get_unchecked(0)) {
servo-19be2cd3fa4b8fe2560dda9a62f1c2271f9fb41e/vendor/rayon-1.5.0/src/slice/quicksort.rs:73:            ptr::copy_nonoverlapping(v.get_unchecked(1), v.get_unchecked_mut(0), 1);
servo-19be2cd3fa4b8fe2560dda9a62f1c2271f9fb41e/vendor/rayon-1.5.0/src/slice/quicksort.rs:81:                ptr::copy_nonoverlapping(v.get_unchecked(i), v.get_unchecked_mut(i - 1), 1);
servo-19be2cd3fa4b8fe2560dda9a62f1c2271f9fb41e/vendor/rayon-1.5.0/src/slice/quicksort.rs:97:        if len >= 2 && is_less(v.get_unchecked(len - 1), v.get_unchecked(len - 2)) {
servo-19be2cd3fa4b8fe2560dda9a62f1c2271f9fb41e/vendor/rayon-1.5.0/src/slice/quicksort.rs:108:            ptr::copy_nonoverlapping(v.get_unchecked(len - 2), v.get_unchecked_mut(len - 1), 1);
servo-19be2cd3fa4b8fe2560dda9a62f1c2271f9fb41e/vendor/rayon-1.5.0/src/slice/quicksort.rs:116:                ptr::copy_nonoverlapping(v.get_unchecked(i), v.get_unchecked_mut(i + 1), 1);
servo-19be2cd3fa4b8fe2560dda9a62f1c2271f9fb41e/vendor/rayon-1.5.0/src/slice/quicksort.rs:143:            while i < len && !is_less(v.get_unchecked(i), v.get_unchecked(i - 1)) {
servo-19be2cd3fa4b8fe2560dda9a62f1c2271f9fb41e/vendor/rayon-1.5.0/src/slice/quicksort.rs:515:            ptr::swap(v.get_unchecked_mut(l), v.get_unchecked_mut(r));
servo-19be2cd3fa4b8fe2560dda9a62f1c2271f9fb41e/vendor/rayon-1.5.0/src/slice/quicksort.rs:598:            if is_less(v.get_unchecked(*b), v.get_unchecked(*a)) {
swc-00461f3a76ed82f41f334cd34008209563c473e5/vendor/rand_hc-0.1.0/src/hc128.rs:186:            *p.get_unchecked_mut(i) = p.get_unchecked(i)
swc-00461f3a76ed82f41f334cd34008209563c473e5/vendor/rand_hc-0.1.0/src/hc128.rs:211:            *q.get_unchecked_mut(i) = q.get_unchecked(i)
